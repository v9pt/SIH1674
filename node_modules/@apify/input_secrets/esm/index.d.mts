import { KeyObject } from 'crypto';

/**
 * Get keys of secret fields from input schema
 */
declare function getInputSchemaSecretFieldKeys(inputSchema: any): string[];
/**
 * Encrypts input secret value
 */
declare function encryptInputSecretValue({ value, publicKey }: {
    value: string;
    publicKey: KeyObject;
}): string;
/**
 * Encrypts actor input secrets
 */
declare function encryptInputSecrets<T extends Record<string, any>>({ input, inputSchema, publicKey }: {
    input: T;
    inputSchema: object;
    publicKey: KeyObject;
}): T;
/**
 * Decrypts actor input secrets
 * @param {Object} input
 * @param {KeyObject} privateKey
 * @returns Object
 */
declare function decryptInputSecrets<T>({ input, privateKey }: {
    input: T;
    privateKey: KeyObject;
}): T;

export { decryptInputSecrets, encryptInputSecretValue, encryptInputSecrets, getInputSchemaSecretFieldKeys };
