"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareSourceRepo = prepareSourceRepo;
const createSpinner = require("ora");
const path_1 = require("path");
const promises_1 = require("node:fs/promises");
async function prepareSourceRepo(gitClient, ref, source, relativeDestination, tempImportBranch, sourceRemoteUrl) {
    const spinner = createSpinner().start(`Fetching ${ref} from ${sourceRemoteUrl}`);
    const relativeSourceDir = (0, path_1.relative)(gitClient.root, (0, path_1.join)(gitClient.root, source));
    if (relativeSourceDir !== '') {
        if (await gitClient.hasFilterRepoInstalled()) {
            spinner.start(`Filtering git history to only include files in ${relativeSourceDir}`);
            await gitClient.filterRepo(relativeSourceDir);
        }
        else {
            spinner.start(`Filtering git history to only include files in ${relativeSourceDir} (this might take a few minutes -- install git-filter-repo for faster performance)`);
            await gitClient.filterBranch(relativeSourceDir, tempImportBranch);
        }
        spinner.succeed(`Filtered git history to only include files in ${relativeSourceDir}`);
    }
    const destinationInSource = (0, path_1.join)(gitClient.root, relativeDestination);
    spinner.start(`Moving files and git history to ${destinationInSource}`);
    // The result of filter-branch will contain only the files in the subdirectory at its root.
    const files = await gitClient.getGitFiles('.');
    try {
        await (0, promises_1.rm)(destinationInSource, {
            recursive: true,
        });
    }
    catch { }
    await (0, promises_1.mkdir)(destinationInSource, { recursive: true });
    for (const file of files) {
        spinner.start(`Moving files and git history to ${destinationInSource}: ${file}`);
        const newPath = (0, path_1.join)(destinationInSource, file);
        await (0, promises_1.mkdir)((0, path_1.dirname)(newPath), { recursive: true });
        try {
            await gitClient.move(file, newPath);
        }
        catch {
            await wait(100);
            await gitClient.move(file, newPath);
        }
    }
    await gitClient.commit(`chore(repo): move ${source} to ${relativeDestination} to prepare to be imported`);
    await gitClient.amendCommit();
    spinner.succeed(`${sourceRemoteUrl} has been prepared to be imported into this workspace on a temporary branch: ${tempImportBranch} in ${gitClient.root}`);
}
function wait(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
